// Copyright Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Generated code exported from UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

// IWYU pragma: private, include "AgoraBlueprintPlugin/AgoraBPuDataTypesBase.h"
#include "Templates/IsUEnumClass.h"
#include "UObject/ObjectMacros.h"
#include "UObject/ReflectedTypeAccessors.h"

PRAGMA_DISABLE_DEPRECATION_WARNINGS
#ifdef AGORAPLUGIN_AgoraBPuDataTypesBase_generated_h
#error "AgoraBPuDataTypesBase.generated.h already included, missing '#pragma once' in AgoraBPuDataTypesBase.h"
#endif
#define AGORAPLUGIN_AgoraBPuDataTypesBase_generated_h

#undef CURRENT_FILE_ID
#define CURRENT_FILE_ID FID_Users_RCI_2_Documents_GitHub_LocalPlayTest_Plugins_AgoraVoice_AgoraPlugin_Source_AgoraPlugin_Public_AgoraBlueprintPlugin_AgoraBPuDataTypesBase_h


#define FOREACH_ENUM_EUABT_MEDIA_PLAYER_REASON(op) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_NONE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INVALID_ARGUMENTS) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_NO_RESOURCE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INVALID_MEDIA_SOURCE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_UNKNOWN_STREAM_TYPE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_OBJ_NOT_INITIALIZED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_CODEC_NOT_SUPPORTED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_VIDEO_RENDER_FAILED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INVALID_STATE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_URL_NOT_FOUND) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INVALID_CONNECTION_STATE) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_SRC_BUFFER_UNDERFLOW) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_INTERRUPTED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_NOT_SUPPORTED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_TOKEN_EXPIRED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_IP_EXPIRED) \
	op(EUABT_MEDIA_PLAYER_REASON::PLAYER_REASON_UNKNOWN) 

enum class EUABT_MEDIA_PLAYER_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_PLAYER_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_PLAYER_REASON>();

#define FOREACH_ENUM_EUABT_MEDIA_PLAYER_EVENT(op) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SEEK_BEGIN) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SEEK_COMPLETE) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SEEK_ERROR) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_AUDIO_TRACK_CHANGED) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_BUFFER_LOW) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_BUFFER_RECOVER) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_FREEZE_START) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_FREEZE_STOP) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SWITCH_BEGIN) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SWITCH_COMPLETE) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_SWITCH_ERROR) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_FIRST_DISPLAYED) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_REACH_CACHE_FILE_MAX_COUNT) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_REACH_CACHE_FILE_MAX_SIZE) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_TRY_OPEN_START) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_TRY_OPEN_SUCCEED) \
	op(EUABT_MEDIA_PLAYER_EVENT::PLAYER_EVENT_TRY_OPEN_FAILED) 

enum class EUABT_MEDIA_PLAYER_EVENT : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_PLAYER_EVENT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_PLAYER_EVENT>();

#define FOREACH_ENUM_EUABT_PLAYER_PRELOAD_EVENT(op) \
	op(EUABT_PLAYER_PRELOAD_EVENT::PLAYER_PRELOAD_EVENT_BEGIN) \
	op(EUABT_PLAYER_PRELOAD_EVENT::PLAYER_PRELOAD_EVENT_COMPLETE) \
	op(EUABT_PLAYER_PRELOAD_EVENT::PLAYER_PRELOAD_EVENT_ERROR) 

enum class EUABT_PLAYER_PRELOAD_EVENT : uint8;
template<> struct TIsUEnumClass<EUABT_PLAYER_PRELOAD_EVENT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_PLAYER_PRELOAD_EVENT>();

#define FOREACH_ENUM_EUABT_AUDIO_DUAL_MONO_MODE(op) \
	op(EUABT_AUDIO_DUAL_MONO_MODE::AUDIO_DUAL_MONO_STEREO) \
	op(EUABT_AUDIO_DUAL_MONO_MODE::AUDIO_DUAL_MONO_L) \
	op(EUABT_AUDIO_DUAL_MONO_MODE::AUDIO_DUAL_MONO_R) \
	op(EUABT_AUDIO_DUAL_MONO_MODE::AUDIO_DUAL_MONO_MIX) 

enum class EUABT_AUDIO_DUAL_MONO_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_DUAL_MONO_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_DUAL_MONO_MODE>();

#define FOREACH_ENUM_EUABT_MEDIA_STREAM_TYPE(op) \
	op(EUABT_MEDIA_STREAM_TYPE::STREAM_TYPE_UNKNOWN) \
	op(EUABT_MEDIA_STREAM_TYPE::STREAM_TYPE_VIDEO) \
	op(EUABT_MEDIA_STREAM_TYPE::STREAM_TYPE_AUDIO) \
	op(EUABT_MEDIA_STREAM_TYPE::STREAM_TYPE_SUBTITLE) 

enum class EUABT_MEDIA_STREAM_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_STREAM_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_STREAM_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_SOURCE_TYPE(op) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_PRIMARY) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_SECONDARY) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SCREEN_PRIMARY) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SCREEN) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SCREEN_SECONDARY) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CUSTOM) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_MEDIA_PLAYER) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_RTC_IMAGE_PNG) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_RTC_IMAGE_JPEG) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_RTC_IMAGE_GIF) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_REMOTE) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_TRANSCODED) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_THIRD) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_CAMERA_FOURTH) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SCREEN_THIRD) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SCREEN_FOURTH) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_SPEECH_DRIVEN) \
	op(EUABT_VIDEO_SOURCE_TYPE::VIDEO_SOURCE_UNKNOWN) 

enum class EUABT_VIDEO_SOURCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_SOURCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_SOURCE_TYPE>();

#define FOREACH_ENUM_EUABT_THREAD_PRIORITY_TYPE(op) \
	op(EUABT_THREAD_PRIORITY_TYPE::LOWEST) \
	op(EUABT_THREAD_PRIORITY_TYPE::LOW) \
	op(EUABT_THREAD_PRIORITY_TYPE::NORMAL) \
	op(EUABT_THREAD_PRIORITY_TYPE::HIGH) \
	op(EUABT_THREAD_PRIORITY_TYPE::HIGHEST) \
	op(EUABT_THREAD_PRIORITY_TYPE::CRITICAL) 

enum class EUABT_THREAD_PRIORITY_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_THREAD_PRIORITY_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_THREAD_PRIORITY_TYPE>();

#define FOREACH_ENUM_EUABT_PROXY_TYPE(op) \
	op(EUABT_PROXY_TYPE::NONE_PROXY_TYPE) \
	op(EUABT_PROXY_TYPE::UDP_PROXY_TYPE) \
	op(EUABT_PROXY_TYPE::TCP_PROXY_TYPE) \
	op(EUABT_PROXY_TYPE::LOCAL_PROXY_TYPE) \
	op(EUABT_PROXY_TYPE::TCP_PROXY_AUTO_FALLBACK_TYPE) \
	op(EUABT_PROXY_TYPE::HTTP_PROXY_TYPE) \
	op(EUABT_PROXY_TYPE::HTTPS_PROXY_TYPE) 

enum class EUABT_PROXY_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_PROXY_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_PROXY_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_STREAM_TYPE(op) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_HIGH) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LOW) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_1) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_2) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_3) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_4) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_5) \
	op(EUABT_VIDEO_STREAM_TYPE::VIDEO_STREAM_LAYER_6) 

enum class EUABT_VIDEO_STREAM_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_STREAM_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_STREAM_TYPE>();

#define FOREACH_ENUM_EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL(op) \
	op(EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL::REMOTE_VIDEO_DOWNSCALE_LEVEL_NONE) \
	op(EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL::REMOTE_VIDEO_DOWNSCALE_LEVEL_1) \
	op(EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL::REMOTE_VIDEO_DOWNSCALE_LEVEL_2) \
	op(EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL::REMOTE_VIDEO_DOWNSCALE_LEVEL_3) \
	op(EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL::REMOTE_VIDEO_DOWNSCALE_LEVEL_4) 

enum class EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_VIDEO_DOWNSCALE_LEVEL>();

#define FOREACH_ENUM_EUABT_LOCAL_VIDEO_STREAM_STATE(op) \
	op(EUABT_LOCAL_VIDEO_STREAM_STATE::LOCAL_VIDEO_STREAM_STATE_STOPPED) \
	op(EUABT_LOCAL_VIDEO_STREAM_STATE::LOCAL_VIDEO_STREAM_STATE_CAPTURING) \
	op(EUABT_LOCAL_VIDEO_STREAM_STATE::LOCAL_VIDEO_STREAM_STATE_ENCODING) \
	op(EUABT_LOCAL_VIDEO_STREAM_STATE::LOCAL_VIDEO_STREAM_STATE_FAILED) 

enum class EUABT_LOCAL_VIDEO_STREAM_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_LOCAL_VIDEO_STREAM_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOCAL_VIDEO_STREAM_STATE>();

#define FOREACH_ENUM_EUABT_REMOTE_VIDEO_STATE(op) \
	op(EUABT_REMOTE_VIDEO_STATE::REMOTE_VIDEO_STATE_STOPPED) \
	op(EUABT_REMOTE_VIDEO_STATE::REMOTE_VIDEO_STATE_STARTING) \
	op(EUABT_REMOTE_VIDEO_STATE::REMOTE_VIDEO_STATE_DECODING) \
	op(EUABT_REMOTE_VIDEO_STATE::REMOTE_VIDEO_STATE_FROZEN) \
	op(EUABT_REMOTE_VIDEO_STATE::REMOTE_VIDEO_STATE_FAILED) 

enum class EUABT_REMOTE_VIDEO_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_VIDEO_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_VIDEO_STATE>();

#define FOREACH_ENUM_EUABT_REMOTE_VIDEO_STATE_REASON(op) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_INTERNAL) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_LOW) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_VIDEO_STREAM_TYPE_CHANGE_TO_HIGH) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_SDK_IN_BACKGROUND) \
	op(EUABT_REMOTE_VIDEO_STATE_REASON::REMOTE_VIDEO_STATE_REASON_CODEC_NOT_SUPPORT) 

enum class EUABT_REMOTE_VIDEO_STATE_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_VIDEO_STATE_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_VIDEO_STATE_REASON>();

#define FOREACH_ENUM_EUABT_LOCAL_VIDEO_STREAM_REASON(op) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_OK) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_FAILURE) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_NO_PERMISSION) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_BUSY) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_CAPTURE_INBACKGROUND) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_CAPTURE_MULTIPLE_FOREGROUND_APPS) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_NOT_FOUND) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_DISCONNECTED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_INVALID_ID) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_INTERRUPT) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_FATAL_ERROR) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_DEVICE_SYSTEM_PRESSURE) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_MINIMIZED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_CLOSED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_OCCLUDED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_NOT_SUPPORTED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_FAILURE) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_NO_PERMISSION) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_AUTO_FALLBACK) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_HIDDEN) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_HIDDEN) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_MINIMIZED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_PAUSED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_RESUMED) \
	op(EUABT_LOCAL_VIDEO_STREAM_REASON::LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_DISPLAY_DISCONNECTED) 

enum class EUABT_LOCAL_VIDEO_STREAM_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_LOCAL_VIDEO_STREAM_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOCAL_VIDEO_STREAM_REASON>();

#define FOREACH_ENUM_EUABT_QUALITY_ADAPT_INDICATION(op) \
	op(EUABT_QUALITY_ADAPT_INDICATION::ADAPT_NONE) \
	op(EUABT_QUALITY_ADAPT_INDICATION::ADAPT_UP_BANDWIDTH) \
	op(EUABT_QUALITY_ADAPT_INDICATION::ADAPT_DOWN_BANDWIDTH) 

enum class EUABT_QUALITY_ADAPT_INDICATION : uint8;
template<> struct TIsUEnumClass<EUABT_QUALITY_ADAPT_INDICATION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_QUALITY_ADAPT_INDICATION>();

#define FOREACH_ENUM_EUABT_VIDEO_CODEC_TYPE(op) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_NONE) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_VP8) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_H264) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_H265) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_GENERIC) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_GENERIC_H264) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_AV1) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_VP9) \
	op(EUABT_VIDEO_CODEC_TYPE::VIDEO_CODEC_GENERIC_JPEG) 

enum class EUABT_VIDEO_CODEC_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_CODEC_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_CODEC_TYPE>();

#define FOREACH_ENUM_EUABT_LOCAL_AUDIO_STREAM_STATE(op) \
	op(EUABT_LOCAL_AUDIO_STREAM_STATE::LOCAL_AUDIO_STREAM_STATE_STOPPED) \
	op(EUABT_LOCAL_AUDIO_STREAM_STATE::LOCAL_AUDIO_STREAM_STATE_RECORDING) \
	op(EUABT_LOCAL_AUDIO_STREAM_STATE::LOCAL_AUDIO_STREAM_STATE_ENCODING) \
	op(EUABT_LOCAL_AUDIO_STREAM_STATE::LOCAL_AUDIO_STREAM_STATE_FAILED) 

enum class EUABT_LOCAL_AUDIO_STREAM_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_LOCAL_AUDIO_STREAM_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOCAL_AUDIO_STREAM_STATE>();

#define FOREACH_ENUM_EUABT_LOCAL_AUDIO_STREAM_REASON(op) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_OK) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_FAILURE) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_DEVICE_NO_PERMISSION) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_DEVICE_BUSY) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_RECORD_FAILURE) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_ENCODE_FAILURE) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_NO_RECORDING_DEVICE) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_NO_PLAYOUT_DEVICE) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_INTERRUPTED) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_RECORD_INVALID_ID) \
	op(EUABT_LOCAL_AUDIO_STREAM_REASON::LOCAL_AUDIO_STREAM_REASON_PLAYOUT_INVALID_ID) 

enum class EUABT_LOCAL_AUDIO_STREAM_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_LOCAL_AUDIO_STREAM_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOCAL_AUDIO_STREAM_REASON>();

#define FOREACH_ENUM_EUABT_REMOTE_AUDIO_STATE(op) \
	op(EUABT_REMOTE_AUDIO_STATE::REMOTE_AUDIO_STATE_STOPPED) \
	op(EUABT_REMOTE_AUDIO_STATE::REMOTE_AUDIO_STATE_STARTING) \
	op(EUABT_REMOTE_AUDIO_STATE::REMOTE_AUDIO_STATE_DECODING) \
	op(EUABT_REMOTE_AUDIO_STATE::REMOTE_AUDIO_STATE_FROZEN) \
	op(EUABT_REMOTE_AUDIO_STATE::REMOTE_AUDIO_STATE_FAILED) 

enum class EUABT_REMOTE_AUDIO_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_AUDIO_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_AUDIO_STATE>();

#define FOREACH_ENUM_EUABT_REMOTE_AUDIO_STATE_REASON(op) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_INTERNAL) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_NETWORK_CONGESTION) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_NETWORK_RECOVERY) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_LOCAL_MUTED) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_LOCAL_UNMUTED) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_REMOTE_MUTED) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_REMOTE_UNMUTED) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_REMOTE_OFFLINE) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_NO_PACKET_RECEIVE) \
	op(EUABT_REMOTE_AUDIO_STATE_REASON::REMOTE_AUDIO_REASON_LOCAL_PLAY_FAILED) 

enum class EUABT_REMOTE_AUDIO_STATE_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_AUDIO_STATE_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_AUDIO_STATE_REASON>();

#define FOREACH_ENUM_EUABT_RTMP_STREAM_PUBLISH_STATE(op) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_IDLE) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_CONNECTING) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_RUNNING) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_RECOVERING) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_FAILURE) \
	op(EUABT_RTMP_STREAM_PUBLISH_STATE::RTMP_STREAM_PUBLISH_STATE_DISCONNECTING) 

enum class EUABT_RTMP_STREAM_PUBLISH_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_RTMP_STREAM_PUBLISH_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RTMP_STREAM_PUBLISH_STATE>();

#define FOREACH_ENUM_EUABT_RTMP_STREAM_PUBLISH_REASON(op) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_OK) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_INVALID_ARGUMENT) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_ENCRYPTED_STREAM_NOT_ALLOWED) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_CONNECTION_TIMEOUT) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_INTERNAL_SERVER_ERROR) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_RTMP_SERVER_ERROR) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_TOO_OFTEN) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_REACH_LIMIT) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_NOT_AUTHORIZED) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_STREAM_NOT_FOUND) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_FORMAT_NOT_SUPPORTED) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_NOT_BROADCASTER) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_TRANSCODING_NO_MIX_STREAM) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_NET_DOWN) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_INVALID_APPID) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_PUBLISH_REASON_INVALID_PRIVILEGE) \
	op(EUABT_RTMP_STREAM_PUBLISH_REASON::RTMP_STREAM_UNPUBLISH_REASON_OK) 

enum class EUABT_RTMP_STREAM_PUBLISH_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_RTMP_STREAM_PUBLISH_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RTMP_STREAM_PUBLISH_REASON>();

#define FOREACH_ENUM_EUABT_CONNECTION_CHANGED_REASON_TYPE(op) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_CONNECTING) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_JOIN_SUCCESS) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_INTERRUPTED) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_BANNED_BY_SERVER) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_JOIN_FAILED) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_LEAVE_CHANNEL) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_INVALID_APP_ID) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_INVALID_CHANNEL_NAME) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_INVALID_TOKEN) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_TOKEN_EXPIRED) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_REJECTED_BY_SERVER) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_SETTING_PROXY_SERVER) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_RENEW_TOKEN) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_REJOIN_SUCCESS) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_LOST) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_ECHO_TEST) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED_BY_USER) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_SAME_UID_LOGIN) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_TOO_MANY_BROADCASTERS) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_LICENSE_VALIDATION_FAILURE) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_CERTIFICATION_VERYFY_FAILURE) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_STREAM_CHANNEL_NOT_AVAILABLE) \
	op(EUABT_CONNECTION_CHANGED_REASON_TYPE::CONNECTION_CHANGED_INCONSISTENT_APPID) 

enum class EUABT_CONNECTION_CHANGED_REASON_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CONNECTION_CHANGED_REASON_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CONNECTION_CHANGED_REASON_TYPE>();

#define FOREACH_ENUM_EUABT_WLACC_MESSAGE_REASON(op) \
	op(EUABT_WLACC_MESSAGE_REASON::WLACC_MESSAGE_REASON_WEAK_SIGNAL) \
	op(EUABT_WLACC_MESSAGE_REASON::WLACC_MESSAGE_REASON_CHANNEL_CONGESTION) 

enum class EUABT_WLACC_MESSAGE_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_WLACC_MESSAGE_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_WLACC_MESSAGE_REASON>();

#define FOREACH_ENUM_EUABT_WLACC_SUGGEST_ACTION(op) \
	op(EUABT_WLACC_SUGGEST_ACTION::WLACC_SUGGEST_ACTION_CLOSE_TO_WIFI) \
	op(EUABT_WLACC_SUGGEST_ACTION::WLACC_SUGGEST_ACTION_CONNECT_SSID) \
	op(EUABT_WLACC_SUGGEST_ACTION::WLACC_SUGGEST_ACTION_CHECK_5G) \
	op(EUABT_WLACC_SUGGEST_ACTION::WLACC_SUGGEST_ACTION_MODIFY_SSID) 

enum class EUABT_WLACC_SUGGEST_ACTION : uint8;
template<> struct TIsUEnumClass<EUABT_WLACC_SUGGEST_ACTION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_WLACC_SUGGEST_ACTION>();

#define FOREACH_ENUM_EUABT_ENCRYPTION_ERROR_TYPE(op) \
	op(EUABT_ENCRYPTION_ERROR_TYPE::ENCRYPTION_ERROR_INTERNAL_FAILURE) \
	op(EUABT_ENCRYPTION_ERROR_TYPE::ENCRYPTION_ERROR_DECRYPTION_FAILURE) \
	op(EUABT_ENCRYPTION_ERROR_TYPE::ENCRYPTION_ERROR_ENCRYPTION_FAILURE) \
	op(EUABT_ENCRYPTION_ERROR_TYPE::ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE) \
	op(EUABT_ENCRYPTION_ERROR_TYPE::ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE) 

enum class EUABT_ENCRYPTION_ERROR_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_ENCRYPTION_ERROR_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_ENCRYPTION_ERROR_TYPE>();

#define FOREACH_ENUM_EUABT_PERMISSION_TYPE(op) \
	op(EUABT_PERMISSION_TYPE::RECORD_AUDIO) \
	op(EUABT_PERMISSION_TYPE::CAMERA) \
	op(EUABT_PERMISSION_TYPE::SCREEN_CAPTURE) 

enum class EUABT_PERMISSION_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_PERMISSION_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_PERMISSION_TYPE>();

#define FOREACH_ENUM_EUABT_MEDIA_TRACE_EVENT(op) \
	op(EUABT_MEDIA_TRACE_EVENT::MEDIA_TRACE_EVENT_VIDEO_RENDERED) \
	op(EUABT_MEDIA_TRACE_EVENT::MEDIA_TRACE_EVENT_VIDEO_DECODED) 

enum class EUABT_MEDIA_TRACE_EVENT : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_TRACE_EVENT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_TRACE_EVENT>();

#define FOREACH_ENUM_EUABT_UPLOAD_ERROR_REASON(op) \
	op(EUABT_UPLOAD_ERROR_REASON::UPLOAD_SUCCESS) \
	op(EUABT_UPLOAD_ERROR_REASON::UPLOAD_NET_ERROR) \
	op(EUABT_UPLOAD_ERROR_REASON::UPLOAD_SERVER_ERROR) 

enum class EUABT_UPLOAD_ERROR_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_UPLOAD_ERROR_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_UPLOAD_ERROR_REASON>();

#define FOREACH_ENUM_EUABT_STREAM_SUBSCRIBE_STATE(op) \
	op(EUABT_STREAM_SUBSCRIBE_STATE::SUB_STATE_IDLE) \
	op(EUABT_STREAM_SUBSCRIBE_STATE::SUB_STATE_NO_SUBSCRIBED) \
	op(EUABT_STREAM_SUBSCRIBE_STATE::SUB_STATE_SUBSCRIBING) \
	op(EUABT_STREAM_SUBSCRIBE_STATE::SUB_STATE_SUBSCRIBED) 

enum class EUABT_STREAM_SUBSCRIBE_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_STREAM_SUBSCRIBE_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_STREAM_SUBSCRIBE_STATE>();

#define FOREACH_ENUM_EUABT_STREAM_PUBLISH_STATE(op) \
	op(EUABT_STREAM_PUBLISH_STATE::PUB_STATE_IDLE) \
	op(EUABT_STREAM_PUBLISH_STATE::PUB_STATE_NO_PUBLISHED) \
	op(EUABT_STREAM_PUBLISH_STATE::PUB_STATE_PUBLISHING) \
	op(EUABT_STREAM_PUBLISH_STATE::PUB_STATE_PUBLISHED) 

enum class EUABT_STREAM_PUBLISH_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_STREAM_PUBLISH_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_STREAM_PUBLISH_STATE>();

#define FOREACH_ENUM_EUABT_DIRECT_CDN_STREAMING_STATE(op) \
	op(EUABT_DIRECT_CDN_STREAMING_STATE::DIRECT_CDN_STREAMING_STATE_IDLE) \
	op(EUABT_DIRECT_CDN_STREAMING_STATE::DIRECT_CDN_STREAMING_STATE_RUNNING) \
	op(EUABT_DIRECT_CDN_STREAMING_STATE::DIRECT_CDN_STREAMING_STATE_STOPPED) \
	op(EUABT_DIRECT_CDN_STREAMING_STATE::DIRECT_CDN_STREAMING_STATE_FAILED) \
	op(EUABT_DIRECT_CDN_STREAMING_STATE::DIRECT_CDN_STREAMING_STATE_RECOVERING) 

enum class EUABT_DIRECT_CDN_STREAMING_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_DIRECT_CDN_STREAMING_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_DIRECT_CDN_STREAMING_STATE>();

#define FOREACH_ENUM_EUABT_DIRECT_CDN_STREAMING_REASON(op) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_OK) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_FAILED) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_AUDIO_PUBLICATION) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_VIDEO_PUBLICATION) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_NET_CONNECT) \
	op(EUABT_DIRECT_CDN_STREAMING_REASON::DIRECT_CDN_STREAMING_REASON_BAD_NAME) 

enum class EUABT_DIRECT_CDN_STREAMING_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_DIRECT_CDN_STREAMING_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_DIRECT_CDN_STREAMING_REASON>();

#define FOREACH_ENUM_EUABT_USER_OFFLINE_REASON_TYPE(op) \
	op(EUABT_USER_OFFLINE_REASON_TYPE::USER_OFFLINE_QUIT) \
	op(EUABT_USER_OFFLINE_REASON_TYPE::USER_OFFLINE_DROPPED) \
	op(EUABT_USER_OFFLINE_REASON_TYPE::USER_OFFLINE_BECOME_AUDIENCE) 

enum class EUABT_USER_OFFLINE_REASON_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_USER_OFFLINE_REASON_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_USER_OFFLINE_REASON_TYPE>();

#define FOREACH_ENUM_EUABT_MEDIA_PLAYER_STATE(op) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_IDLE) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_OPENING) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_OPEN_COMPLETED) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_PLAYING) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_PAUSED) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_PLAYBACK_COMPLETED) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_PLAYBACK_ALL_LOOPS_COMPLETED) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_STOPPED) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_PAUSING_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_STOPPING_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_SEEKING_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_GETTING_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_NONE_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_DO_NOTHING_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_SET_TRACK_INTERNAL) \
	op(EUABT_MEDIA_PLAYER_STATE::PLAYER_STATE_FAILED) 

enum class EUABT_MEDIA_PLAYER_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_PLAYER_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_PLAYER_STATE>();

#define FOREACH_ENUM_EUABT_CHANNEL_PROFILE_TYPE(op) \
	op(EUABT_CHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_COMMUNICATION) \
	op(EUABT_CHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_LIVE_BROADCASTING) \
	op(EUABT_CHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_GAME) \
	op(EUABT_CHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_CLOUD_GAMING) \
	op(EUABT_CHANNEL_PROFILE_TYPE::CHANNEL_PROFILE_COMMUNICATION_1v1) 

enum class EUABT_CHANNEL_PROFILE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CHANNEL_PROFILE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CHANNEL_PROFILE_TYPE>();

#define FOREACH_ENUM_EUABT_EXTERNAL_VIDEO_SOURCE_TYPE(op) \
	op(EUABT_EXTERNAL_VIDEO_SOURCE_TYPE::VIDEO_FRAME) \
	op(EUABT_EXTERNAL_VIDEO_SOURCE_TYPE::ENCODED_VIDEO_FRAME) 

enum class EUABT_EXTERNAL_VIDEO_SOURCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_EXTERNAL_VIDEO_SOURCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_EXTERNAL_VIDEO_SOURCE_TYPE>();

#define FOREACH_ENUM_EUABT_TCCMODE(op) \
	op(EUABT_TCcMode::CC_ENABLED) \
	op(EUABT_TCcMode::CC_DISABLED) 

enum class EUABT_TCcMode : uint8;
template<> struct TIsUEnumClass<EUABT_TCcMode> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_TCcMode>();

#define FOREACH_ENUM_EUABT_VIDEO_MIRROR_MODE_TYPE(op) \
	op(EUABT_VIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_AUTO) \
	op(EUABT_VIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_ENABLED) \
	op(EUABT_VIDEO_MIRROR_MODE_TYPE::VIDEO_MIRROR_MODE_DISABLED) 

enum class EUABT_VIDEO_MIRROR_MODE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_MIRROR_MODE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_MIRROR_MODE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_VIEW_SETUP_MODE(op) \
	op(EUABT_VIDEO_VIEW_SETUP_MODE::VIDEO_VIEW_SETUP_REPLACE) \
	op(EUABT_VIDEO_VIEW_SETUP_MODE::VIDEO_VIEW_SETUP_ADD) \
	op(EUABT_VIDEO_VIEW_SETUP_MODE::VIDEO_VIEW_SETUP_REMOVE) 

enum class EUABT_VIDEO_VIEW_SETUP_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_VIEW_SETUP_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_VIEW_SETUP_MODE>();

#define FOREACH_ENUM_EUABT_AUDIO_PROFILE_TYPE(op) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_DEFAULT) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_SPEECH_STANDARD) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_MUSIC_STANDARD) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_MUSIC_STANDARD_STEREO) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_MUSIC_HIGH_QUALITY) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_IOT) \
	op(EUABT_AUDIO_PROFILE_TYPE::AUDIO_PROFILE_NUM) 

enum class EUABT_AUDIO_PROFILE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_PROFILE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_PROFILE_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_SCENARIO_TYPE(op) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_DEFAULT) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_GAME_STREAMING) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_CHATROOM) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_CHORUS) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_MEETING) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_AI_SERVER) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_AI_CLIENT) \
	op(EUABT_AUDIO_SCENARIO_TYPE::AUDIO_SCENARIO_NUM) 

enum class EUABT_AUDIO_SCENARIO_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_SCENARIO_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_SCENARIO_TYPE>();

#define FOREACH_ENUM_EUABT_LOG_LEVEL(op) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_NONE) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_INFO) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_WARN) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_ERROR) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_FATAL) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_API_CALL) \
	op(EUABT_LOG_LEVEL::LOG_LEVEL_DEBUG) 

enum class EUABT_LOG_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_LOG_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOG_LEVEL>();

#define FOREACH_ENUM_EUABT_CAMERA_DIRECTION(op) \
	op(EUABT_CAMERA_DIRECTION::CAMERA_REAR) \
	op(EUABT_CAMERA_DIRECTION::CAMERA_FRONT) 

enum class EUABT_CAMERA_DIRECTION : uint8;
template<> struct TIsUEnumClass<EUABT_CAMERA_DIRECTION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CAMERA_DIRECTION>();

#define FOREACH_ENUM_EUABT_CAMERA_FOCAL_LENGTH_TYPE(op) \
	op(EUABT_CAMERA_FOCAL_LENGTH_TYPE::CAMERA_FOCAL_LENGTH_DEFAULT) \
	op(EUABT_CAMERA_FOCAL_LENGTH_TYPE::CAMERA_FOCAL_LENGTH_WIDE_ANGLE) \
	op(EUABT_CAMERA_FOCAL_LENGTH_TYPE::CAMERA_FOCAL_LENGTH_ULTRA_WIDE) \
	op(EUABT_CAMERA_FOCAL_LENGTH_TYPE::CAMERA_FOCAL_LENGTH_TELEPHOTO) 

enum class EUABT_CAMERA_FOCAL_LENGTH_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CAMERA_FOCAL_LENGTH_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CAMERA_FOCAL_LENGTH_TYPE>();

#define FOREACH_ENUM_EUABT_ORIENTATION_MODE(op) \
	op(EUABT_ORIENTATION_MODE::ORIENTATION_MODE_ADAPTIVE) \
	op(EUABT_ORIENTATION_MODE::ORIENTATION_MODE_FIXED_LANDSCAPE) \
	op(EUABT_ORIENTATION_MODE::ORIENTATION_MODE_FIXED_PORTRAIT) 

enum class EUABT_ORIENTATION_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_ORIENTATION_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_ORIENTATION_MODE>();

#define FOREACH_ENUM_EUABT_LIGHTENING_CONTRAST_LEVEL(op) \
	op(EUABT_LIGHTENING_CONTRAST_LEVEL::LIGHTENING_CONTRAST_LOW) \
	op(EUABT_LIGHTENING_CONTRAST_LEVEL::LIGHTENING_CONTRAST_NORMAL) \
	op(EUABT_LIGHTENING_CONTRAST_LEVEL::LIGHTENING_CONTRAST_HIGH) 

enum class EUABT_LIGHTENING_CONTRAST_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_LIGHTENING_CONTRAST_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LIGHTENING_CONTRAST_LEVEL>();

#define FOREACH_ENUM_EUABT_MEDIA_SOURCE_TYPE(op) \
	op(EUABT_MEDIA_SOURCE_TYPE::AUDIO_PLAYOUT_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::AUDIO_RECORDING_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::PRIMARY_CAMERA_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::SECONDARY_CAMERA_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::PRIMARY_SCREEN_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::SECONDARY_SCREEN_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::CUSTOM_VIDEO_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::MEDIA_PLAYER_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::RTC_IMAGE_PNG_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::RTC_IMAGE_JPEG_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::RTC_IMAGE_GIF_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::REMOTE_VIDEO_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::TRANSCODED_VIDEO_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::SPEECH_DRIVEN_VIDEO_SOURCE) \
	op(EUABT_MEDIA_SOURCE_TYPE::UNKNOWN_MEDIA_SOURCE) 

enum class EUABT_MEDIA_SOURCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_SOURCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_SOURCE_TYPE>();

#define FOREACH_ENUM_EUABT_LOW_LIGHT_ENHANCE_MODE(op) \
	op(EUABT_LOW_LIGHT_ENHANCE_MODE::LOW_LIGHT_ENHANCE_AUTO) \
	op(EUABT_LOW_LIGHT_ENHANCE_MODE::LOW_LIGHT_ENHANCE_MANUAL) 

enum class EUABT_LOW_LIGHT_ENHANCE_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_LOW_LIGHT_ENHANCE_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOW_LIGHT_ENHANCE_MODE>();

#define FOREACH_ENUM_EUABT_LOW_LIGHT_ENHANCE_LEVEL(op) \
	op(EUABT_LOW_LIGHT_ENHANCE_LEVEL::LOW_LIGHT_ENHANCE_LEVEL_HIGH_QUALITY) \
	op(EUABT_LOW_LIGHT_ENHANCE_LEVEL::LOW_LIGHT_ENHANCE_LEVEL_FAST) 

enum class EUABT_LOW_LIGHT_ENHANCE_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_LOW_LIGHT_ENHANCE_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOW_LIGHT_ENHANCE_LEVEL>();

#define FOREACH_ENUM_EUABT_VIDEO_DENOISER_MODE(op) \
	op(EUABT_VIDEO_DENOISER_MODE::VIDEO_DENOISER_AUTO) \
	op(EUABT_VIDEO_DENOISER_MODE::VIDEO_DENOISER_MANUAL) 

enum class EUABT_VIDEO_DENOISER_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_DENOISER_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_DENOISER_MODE>();

#define FOREACH_ENUM_EUABT_VIDEO_DENOISER_LEVEL(op) \
	op(EUABT_VIDEO_DENOISER_LEVEL::VIDEO_DENOISER_LEVEL_HIGH_QUALITY) \
	op(EUABT_VIDEO_DENOISER_LEVEL::VIDEO_DENOISER_LEVEL_FAST) 

enum class EUABT_VIDEO_DENOISER_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_DENOISER_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_DENOISER_LEVEL>();

#define FOREACH_ENUM_EUABT_BACKGROUND_SOURCE_TYPE(op) \
	op(EUABT_BACKGROUND_SOURCE_TYPE::BACKGROUND_NONE) \
	op(EUABT_BACKGROUND_SOURCE_TYPE::BACKGROUND_COLOR) \
	op(EUABT_BACKGROUND_SOURCE_TYPE::BACKGROUND_IMG) \
	op(EUABT_BACKGROUND_SOURCE_TYPE::BACKGROUND_BLUR) \
	op(EUABT_BACKGROUND_SOURCE_TYPE::BACKGROUND_VIDEO) 

enum class EUABT_BACKGROUND_SOURCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_BACKGROUND_SOURCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_BACKGROUND_SOURCE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_APPLICATION_SCENARIO_TYPE(op) \
	op(EUABT_VIDEO_APPLICATION_SCENARIO_TYPE::APPLICATION_SCENARIO_GENERAL) \
	op(EUABT_VIDEO_APPLICATION_SCENARIO_TYPE::APPLICATION_SCENARIO_MEETING) \
	op(EUABT_VIDEO_APPLICATION_SCENARIO_TYPE::APPLICATION_SCENARIO_1V1) \
	op(EUABT_VIDEO_APPLICATION_SCENARIO_TYPE::APPLICATION_SCENARIO_LIVESHOW) 

enum class EUABT_VIDEO_APPLICATION_SCENARIO_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_APPLICATION_SCENARIO_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_APPLICATION_SCENARIO_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_RECORDING_QUALITY_TYPE(op) \
	op(EUABT_AUDIO_RECORDING_QUALITY_TYPE::AUDIO_RECORDING_QUALITY_LOW) \
	op(EUABT_AUDIO_RECORDING_QUALITY_TYPE::AUDIO_RECORDING_QUALITY_MEDIUM) \
	op(EUABT_AUDIO_RECORDING_QUALITY_TYPE::AUDIO_RECORDING_QUALITY_HIGH) \
	op(EUABT_AUDIO_RECORDING_QUALITY_TYPE::AUDIO_RECORDING_QUALITY_ULTRA_HIGH) 

enum class EUABT_AUDIO_RECORDING_QUALITY_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_RECORDING_QUALITY_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_RECORDING_QUALITY_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_MIXING_DUAL_MONO_MODE(op) \
	op(EUABT_AUDIO_MIXING_DUAL_MONO_MODE::AUDIO_MIXING_DUAL_MONO_AUTO) \
	op(EUABT_AUDIO_MIXING_DUAL_MONO_MODE::AUDIO_MIXING_DUAL_MONO_L) \
	op(EUABT_AUDIO_MIXING_DUAL_MONO_MODE::AUDIO_MIXING_DUAL_MONO_R) \
	op(EUABT_AUDIO_MIXING_DUAL_MONO_MODE::AUDIO_MIXING_DUAL_MONO_MIX) 

enum class EUABT_AUDIO_MIXING_DUAL_MONO_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_MIXING_DUAL_MONO_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_MIXING_DUAL_MONO_MODE>();

#define FOREACH_ENUM_EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY(op) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_31) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_62) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_125) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_250) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_500) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_1K) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_2K) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_4K) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_8K) \
	op(EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY::AUDIO_EQUALIZATION_BAND_16K) 

enum class EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_EQUALIZATION_BAND_FREQUENCY>();

#define FOREACH_ENUM_EUABT_AUDIO_REVERB_TYPE(op) \
	op(EUABT_AUDIO_REVERB_TYPE::AUDIO_REVERB_DRY_LEVEL) \
	op(EUABT_AUDIO_REVERB_TYPE::AUDIO_REVERB_WET_LEVEL) \
	op(EUABT_AUDIO_REVERB_TYPE::AUDIO_REVERB_ROOM_SIZE) \
	op(EUABT_AUDIO_REVERB_TYPE::AUDIO_REVERB_WET_DELAY) \
	op(EUABT_AUDIO_REVERB_TYPE::AUDIO_REVERB_STRENGTH) 

enum class EUABT_AUDIO_REVERB_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_REVERB_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_REVERB_TYPE>();

#define FOREACH_ENUM_EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE(op) \
	op(EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE::RAW_AUDIO_FRAME_OP_MODE_READ_ONLY) \
	op(EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE::RAW_AUDIO_FRAME_OP_MODE_READ_WRITE) 

enum class EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RAW_AUDIO_FRAME_OP_MODE_TYPE>();

#define FOREACH_ENUM_EUABT_STREAM_FALLBACK_OPTIONS(op) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_DISABLED) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_AUDIO_ONLY) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_1) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_2) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_3) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_4) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_5) \
	op(EUABT_STREAM_FALLBACK_OPTIONS::STREAM_FALLBACK_OPTION_VIDEO_STREAM_LAYER_6) 

enum class EUABT_STREAM_FALLBACK_OPTIONS : uint8;
template<> struct TIsUEnumClass<EUABT_STREAM_FALLBACK_OPTIONS> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_STREAM_FALLBACK_OPTIONS>();

#define FOREACH_ENUM_EUABT_VIDEO_CONTENT_HINT(op) \
	op(EUABT_VIDEO_CONTENT_HINT::CONTENT_HINT_NONE) \
	op(EUABT_VIDEO_CONTENT_HINT::CONTENT_HINT_MOTION) \
	op(EUABT_VIDEO_CONTENT_HINT::CONTENT_HINT_DETAILS) 

enum class EUABT_VIDEO_CONTENT_HINT : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_CONTENT_HINT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_CONTENT_HINT>();

#define FOREACH_ENUM_EUABT_AUDIO_SESSION_OPERATION_RESTRICTION(op) \
	op(EUABT_AUDIO_SESSION_OPERATION_RESTRICTION::AUDIO_SESSION_OPERATION_RESTRICTION_NONE) \
	op(EUABT_AUDIO_SESSION_OPERATION_RESTRICTION::AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY) \
	op(EUABT_AUDIO_SESSION_OPERATION_RESTRICTION::AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION) \
	op(EUABT_AUDIO_SESSION_OPERATION_RESTRICTION::AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION) \
	op(EUABT_AUDIO_SESSION_OPERATION_RESTRICTION::AUDIO_SESSION_OPERATION_RESTRICTION_ALL) 

enum class EUABT_AUDIO_SESSION_OPERATION_RESTRICTION : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_SESSION_OPERATION_RESTRICTION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_SESSION_OPERATION_RESTRICTION>();

#define FOREACH_ENUM_EUABT_AUDIO_CODEC_PROFILE_TYPE(op) \
	op(EUABT_AUDIO_CODEC_PROFILE_TYPE::AUDIO_CODEC_PROFILE_LC_AAC) \
	op(EUABT_AUDIO_CODEC_PROFILE_TYPE::AUDIO_CODEC_PROFILE_HE_AAC) \
	op(EUABT_AUDIO_CODEC_PROFILE_TYPE::AUDIO_CODEC_PROFILE_HE_AAC_V2) 

enum class EUABT_AUDIO_CODEC_PROFILE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_CODEC_PROFILE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_CODEC_PROFILE_TYPE>();

#define FOREACH_ENUM_EUABT_WATERMARK_FIT_MODE(op) \
	op(EUABT_WATERMARK_FIT_MODE::FIT_MODE_COVER_POSITION) \
	op(EUABT_WATERMARK_FIT_MODE::FIT_MODE_USE_IMAGE_RATIO) 

enum class EUABT_WATERMARK_FIT_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_WATERMARK_FIT_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_WATERMARK_FIT_MODE>();

#define FOREACH_ENUM_EUABT_AUDIO_AINS_MODE(op) \
	op(EUABT_AUDIO_AINS_MODE::AINS_MODE_BALANCED) \
	op(EUABT_AUDIO_AINS_MODE::AINS_MODE_AGGRESSIVE) \
	op(EUABT_AUDIO_AINS_MODE::AINS_MODE_ULTRALOWLATENCY) 

enum class EUABT_AUDIO_AINS_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_AINS_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_AINS_MODE>();

#define FOREACH_ENUM_EUABT_CONTENT_INSPECT_TYPE(op) \
	op(EUABT_CONTENT_INSPECT_TYPE::CONTENT_INSPECT_INVALID) \
	op(EUABT_CONTENT_INSPECT_TYPE::CONTENT_INSPECT_MODERATION) \
	op(EUABT_CONTENT_INSPECT_TYPE::CONTENT_INSPECT_SUPERVISION) \
	op(EUABT_CONTENT_INSPECT_TYPE::CONTENT_INSPECT_IMAGE_MODERATION) 

enum class EUABT_CONTENT_INSPECT_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CONTENT_INSPECT_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CONTENT_INSPECT_TYPE>();

#define FOREACH_ENUM_EUABT_CLOUD_PROXY_TYPE(op) \
	op(EUABT_CLOUD_PROXY_TYPE::NONE_PROXY) \
	op(EUABT_CLOUD_PROXY_TYPE::UDP_PROXY) \
	op(EUABT_CLOUD_PROXY_TYPE::TCP_PROXY) 

enum class EUABT_CLOUD_PROXY_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CLOUD_PROXY_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CLOUD_PROXY_TYPE>();

#define FOREACH_ENUM_EUABT_LOCAL_PROXY_MODE(op) \
	op(EUABT_LOCAL_PROXY_MODE::ConnectivityFirst) \
	op(EUABT_LOCAL_PROXY_MODE::LocalOnly) 

enum class EUABT_LOCAL_PROXY_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_LOCAL_PROXY_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LOCAL_PROXY_MODE>();

#define FOREACH_ENUM_EUABT_VOICE_AI_TUNER_TYPE(op) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_MATURE_MALE) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_FRESH_MALE) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_ELEGANT_FEMALE) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_SWEET_FEMALE) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_WARM_MALE_SINGING) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_GENTLE_FEMALE_SINGING) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_HUSKY_MALE_SINGING) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_WARM_ELEGANT_FEMALE_SINGING) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_POWERFUL_MALE_SINGING) \
	op(EUABT_VOICE_AI_TUNER_TYPE::VOICE_AI_TUNER_DREAMY_FEMALE_SINGING) 

enum class EUABT_VOICE_AI_TUNER_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VOICE_AI_TUNER_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VOICE_AI_TUNER_TYPE>();

#define FOREACH_ENUM_EUABT_FACE_SHAPE_BEAUTY_STYLE(op) \
	op(EUABT_FACE_SHAPE_BEAUTY_STYLE::FACE_SHAPE_BEAUTY_STYLE_FEMALE) \
	op(EUABT_FACE_SHAPE_BEAUTY_STYLE::FACE_SHAPE_BEAUTY_STYLE_MALE) 

enum class EUABT_FACE_SHAPE_BEAUTY_STYLE : uint8;
template<> struct TIsUEnumClass<EUABT_FACE_SHAPE_BEAUTY_STYLE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_FACE_SHAPE_BEAUTY_STYLE>();

#define FOREACH_ENUM_EUABT_STREAMLAYERINDEX(op) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_1) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_2) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_3) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_4) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_5) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_6) \
	op(EUABT_StreamLayerIndex::STREAM_LOW) \
	op(EUABT_StreamLayerIndex::STREAM_LAYER_COUNT_MAX) 

enum class EUABT_StreamLayerIndex : uint8;
template<> struct TIsUEnumClass<EUABT_StreamLayerIndex> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_StreamLayerIndex>();

#define FOREACH_ENUM_EUABT_AUDIO_SOURCE_TYPE(op) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_MICROPHONE) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_CUSTOM) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_MEDIA_PLAYER) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_LOOPBACK_RECORDING) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_MIXED_STREAM) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_REMOTE_USER) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_REMOTE_CHANNEL) \
	op(EUABT_AUDIO_SOURCE_TYPE::AUDIO_SOURCE_UNKNOWN) 

enum class EUABT_AUDIO_SOURCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_SOURCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_SOURCE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_MODULE_TYPE(op) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_CAPTURER) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_SOFTWARE_ENCODER) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_HARDWARE_ENCODER) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_SOFTWARE_DECODER) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_HARDWARE_DECODER) \
	op(EUABT_VIDEO_MODULE_TYPE::VIDEO_MODULE_RENDERER) 

enum class EUABT_VIDEO_MODULE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_MODULE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_MODULE_TYPE>();

#define FOREACH_ENUM_EUABT_REMOTE_USER_STATE(op) \
	op(EUABT_REMOTE_USER_STATE::USER_STATE_MUTE_AUDIO) \
	op(EUABT_REMOTE_USER_STATE::USER_STATE_MUTE_VIDEO) \
	op(EUABT_REMOTE_USER_STATE::USER_STATE_ENABLE_VIDEO) \
	op(EUABT_REMOTE_USER_STATE::USER_STATE_ENABLE_LOCAL_VIDEO) 

enum class EUABT_REMOTE_USER_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_REMOTE_USER_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_REMOTE_USER_STATE>();

#define FOREACH_ENUM_EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE(op) \
	op(EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE::CAPTURE_BRIGHTNESS_LEVEL_INVALID) \
	op(EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE::CAPTURE_BRIGHTNESS_LEVEL_NORMAL) \
	op(EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE::CAPTURE_BRIGHTNESS_LEVEL_BRIGHT) \
	op(EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE::CAPTURE_BRIGHTNESS_LEVEL_DARK) 

enum class EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CAPTURE_BRIGHTNESS_LEVEL_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_MIXING_STATE_TYPE(op) \
	op(EUABT_AUDIO_MIXING_STATE_TYPE::AUDIO_MIXING_STATE_PLAYING) \
	op(EUABT_AUDIO_MIXING_STATE_TYPE::AUDIO_MIXING_STATE_PAUSED) \
	op(EUABT_AUDIO_MIXING_STATE_TYPE::AUDIO_MIXING_STATE_STOPPED) \
	op(EUABT_AUDIO_MIXING_STATE_TYPE::AUDIO_MIXING_STATE_FAILED) 

enum class EUABT_AUDIO_MIXING_STATE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_MIXING_STATE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_MIXING_STATE_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_MIXING_REASON_TYPE(op) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_OK) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_CAN_NOT_OPEN) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_TOO_FREQUENT_CALL) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_INTERRUPTED_EOF) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_STOPPED_BY_USER) \
	op(EUABT_AUDIO_MIXING_REASON_TYPE::AUDIO_MIXING_REASON_RESUMED_BY_USER) 

enum class EUABT_AUDIO_MIXING_REASON_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_MIXING_REASON_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_MIXING_REASON_TYPE>();

#define FOREACH_ENUM_EUABT_RHYTHM_PLAYER_STATE_TYPE(op) \
	op(EUABT_RHYTHM_PLAYER_STATE_TYPE::RHYTHM_PLAYER_STATE_IDLE) \
	op(EUABT_RHYTHM_PLAYER_STATE_TYPE::RHYTHM_PLAYER_STATE_OPENING) \
	op(EUABT_RHYTHM_PLAYER_STATE_TYPE::RHYTHM_PLAYER_STATE_DECODING) \
	op(EUABT_RHYTHM_PLAYER_STATE_TYPE::RHYTHM_PLAYER_STATE_PLAYING) \
	op(EUABT_RHYTHM_PLAYER_STATE_TYPE::RHYTHM_PLAYER_STATE_FAILED) 

enum class EUABT_RHYTHM_PLAYER_STATE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_RHYTHM_PLAYER_STATE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RHYTHM_PLAYER_STATE_TYPE>();

#define FOREACH_ENUM_EUABT_RHYTHM_PLAYER_REASON(op) \
	op(EUABT_RHYTHM_PLAYER_REASON::RHYTHM_PLAYER_REASON_OK) \
	op(EUABT_RHYTHM_PLAYER_REASON::RHYTHM_PLAYER_REASON_FAILED) \
	op(EUABT_RHYTHM_PLAYER_REASON::RHYTHM_PLAYER_REASON_CAN_NOT_OPEN) \
	op(EUABT_RHYTHM_PLAYER_REASON::RHYTHM_PLAYER_REASON_CAN_NOT_PLAY) \
	op(EUABT_RHYTHM_PLAYER_REASON::RHYTHM_PLAYER_REASON_FILE_OVER_DURATION_LIMIT) 

enum class EUABT_RHYTHM_PLAYER_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_RHYTHM_PLAYER_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RHYTHM_PLAYER_REASON>();

#define FOREACH_ENUM_EUABT_LICENSE_ERROR_TYPE(op) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_INVALID) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_EXPIRE) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_MINUTES_EXCEED) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_LIMITED_PERIOD) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_DIFF_DEVICES) \
	op(EUABT_LICENSE_ERROR_TYPE::LICENSE_ERR_INTERNAL) 

enum class EUABT_LICENSE_ERROR_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_LICENSE_ERROR_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LICENSE_ERROR_TYPE>();

#define FOREACH_ENUM_EUABT_CONTENT_INSPECT_RESULT(op) \
	op(EUABT_CONTENT_INSPECT_RESULT::CONTENT_INSPECT_NEUTRAL) \
	op(EUABT_CONTENT_INSPECT_RESULT::CONTENT_INSPECT_SEXY) \
	op(EUABT_CONTENT_INSPECT_RESULT::CONTENT_INSPECT_PORN) 

enum class EUABT_CONTENT_INSPECT_RESULT : uint8;
template<> struct TIsUEnumClass<EUABT_CONTENT_INSPECT_RESULT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CONTENT_INSPECT_RESULT>();

#define FOREACH_ENUM_EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON(op) \
	op(EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON::CLIENT_ROLE_CHANGE_FAILED_TOO_MANY_BROADCASTERS) \
	op(EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON::CLIENT_ROLE_CHANGE_FAILED_NOT_AUTHORIZED) \
	op(EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON::CLIENT_ROLE_CHANGE_FAILED_REQUEST_TIME_OUT) \
	op(EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON::CLIENT_ROLE_CHANGE_FAILED_CONNECTION_FAILED) 

enum class EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON : uint8;
template<> struct TIsUEnumClass<EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CLIENT_ROLE_CHANGE_FAILED_REASON>();

#define FOREACH_ENUM_EUABT_MEDIA_DEVICE_TYPE(op) \
	op(EUABT_MEDIA_DEVICE_TYPE::UNKNOWN_AUDIO_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::AUDIO_PLAYOUT_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::AUDIO_RECORDING_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::VIDEO_RENDER_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::VIDEO_CAPTURE_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::AUDIO_APPLICATION_PLAYOUT_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::AUDIO_VIRTUAL_PLAYOUT_DEVICE) \
	op(EUABT_MEDIA_DEVICE_TYPE::AUDIO_VIRTUAL_RECORDING_DEVICE) 

enum class EUABT_MEDIA_DEVICE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_MEDIA_DEVICE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_MEDIA_DEVICE_TYPE>();

#define FOREACH_ENUM_EUABT_RTMP_STREAMING_EVENT(op) \
	op(EUABT_RTMP_STREAMING_EVENT::RTMP_STREAMING_EVENT_FAILED_LOAD_IMAGE) \
	op(EUABT_RTMP_STREAMING_EVENT::RTMP_STREAMING_EVENT_URL_ALREADY_IN_USE) \
	op(EUABT_RTMP_STREAMING_EVENT::RTMP_STREAMING_EVENT_ADVANCED_FEATURE_NOT_SUPPORT) \
	op(EUABT_RTMP_STREAMING_EVENT::RTMP_STREAMING_EVENT_REQUEST_TOO_OFTEN) 

enum class EUABT_RTMP_STREAMING_EVENT : uint8;
template<> struct TIsUEnumClass<EUABT_RTMP_STREAMING_EVENT> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RTMP_STREAMING_EVENT>();

#define FOREACH_ENUM_EUABT_CONNECTION_STATE_TYPE(op) \
	op(EUABT_CONNECTION_STATE_TYPE::CONNECTION_STATE_DISCONNECTED) \
	op(EUABT_CONNECTION_STATE_TYPE::CONNECTION_STATE_CONNECTING) \
	op(EUABT_CONNECTION_STATE_TYPE::CONNECTION_STATE_CONNECTED) \
	op(EUABT_CONNECTION_STATE_TYPE::CONNECTION_STATE_RECONNECTING) \
	op(EUABT_CONNECTION_STATE_TYPE::CONNECTION_STATE_FAILED) 

enum class EUABT_CONNECTION_STATE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CONNECTION_STATE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CONNECTION_STATE_TYPE>();

#define FOREACH_ENUM_EUABT_NETWORK_TYPE(op) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_UNKNOWN) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_DISCONNECTED) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_LAN) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_WIFI) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_MOBILE_2G) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_MOBILE_3G) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_MOBILE_4G) \
	op(EUABT_NETWORK_TYPE::NETWORK_TYPE_MOBILE_5G) 

enum class EUABT_NETWORK_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_NETWORK_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_NETWORK_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_TRANSCODER_ERROR(op) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_VIDEO_SOURCE_NOT_READY) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_INVALID_VIDEO_SOURCE_TYPE) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_INVALID_IMAGE_PATH) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_UNSUPPORT_IMAGE_FORMAT) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_INVALID_LAYOUT) \
	op(EUABT_VIDEO_TRANSCODER_ERROR::VT_ERR_INTERNAL) 

enum class EUABT_VIDEO_TRANSCODER_ERROR : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_TRANSCODER_ERROR> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_TRANSCODER_ERROR>();

#define FOREACH_ENUM_EUABT_ENCRYPTION_MODE(op) \
	op(EUABT_ENCRYPTION_MODE::AES_128_XTS) \
	op(EUABT_ENCRYPTION_MODE::AES_128_ECB) \
	op(EUABT_ENCRYPTION_MODE::AES_256_XTS) \
	op(EUABT_ENCRYPTION_MODE::SM4_128_ECB) \
	op(EUABT_ENCRYPTION_MODE::AES_128_GCM) \
	op(EUABT_ENCRYPTION_MODE::AES_256_GCM) \
	op(EUABT_ENCRYPTION_MODE::AES_128_GCM2) \
	op(EUABT_ENCRYPTION_MODE::AES_256_GCM2) \
	op(EUABT_ENCRYPTION_MODE::MODE_END) 

enum class EUABT_ENCRYPTION_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_ENCRYPTION_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_ENCRYPTION_MODE>();

#define FOREACH_ENUM_EUABT_CLIENT_ROLE_TYPE(op) \
	op(EUABT_CLIENT_ROLE_TYPE::CLIENT_ROLE_BROADCASTER) \
	op(EUABT_CLIENT_ROLE_TYPE::CLIENT_ROLE_AUDIENCE) 

enum class EUABT_CLIENT_ROLE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_CLIENT_ROLE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CLIENT_ROLE_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIENCE_LATENCY_LEVEL_TYPE(op) \
	op(EUABT_AUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_LOW_LATENCY) \
	op(EUABT_AUDIENCE_LATENCY_LEVEL_TYPE::AUDIENCE_LATENCY_LEVEL_ULTRA_LOW_LATENCY) 

enum class EUABT_AUDIENCE_LATENCY_LEVEL_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIENCE_LATENCY_LEVEL_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIENCE_LATENCY_LEVEL_TYPE>();

#define FOREACH_ENUM_EUABT_RENDER_MODE_TYPE(op) \
	op(EUABT_RENDER_MODE_TYPE::RENDER_MODE_HIDDEN) \
	op(EUABT_RENDER_MODE_TYPE::RENDER_MODE_FIT) \
	op(EUABT_RENDER_MODE_TYPE::RENDER_MODE_ADAPTIVE) 

enum class EUABT_RENDER_MODE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_RENDER_MODE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_RENDER_MODE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_MODULE_POSITION(op) \
	op(EUABT_VIDEO_MODULE_POSITION::POSITION_POST_CAPTURER) \
	op(EUABT_VIDEO_MODULE_POSITION::POSITION_PRE_RENDERER) \
	op(EUABT_VIDEO_MODULE_POSITION::POSITION_PRE_ENCODER) \
	op(EUABT_VIDEO_MODULE_POSITION::POSITION_POST_CAPTURER_ORIGIN) 

enum class EUABT_VIDEO_MODULE_POSITION : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_MODULE_POSITION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_MODULE_POSITION>();

#define FOREACH_ENUM_EUABT_AREA_CODE(op) \
	op(EUABT_AREA_CODE::AREA_CODE_CN) \
	op(EUABT_AREA_CODE::AREA_CODE_NA) \
	op(EUABT_AREA_CODE::AREA_CODE_EU) \
	op(EUABT_AREA_CODE::AREA_CODE_AS) \
	op(EUABT_AREA_CODE::AREA_CODE_JP) \
	op(EUABT_AREA_CODE::AREA_CODE_IN) \
	op(EUABT_AREA_CODE::AREA_CODE_GLOB) 

enum class EUABT_AREA_CODE : uint8;
template<> struct TIsUEnumClass<EUABT_AREA_CODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AREA_CODE>();

#define FOREACH_ENUM_EUABT_VIDEO_CODEC_CAPABILITY_LEVEL(op) \
	op(EUABT_VIDEO_CODEC_CAPABILITY_LEVEL::CODEC_CAPABILITY_LEVEL_UNSPECIFIED) \
	op(EUABT_VIDEO_CODEC_CAPABILITY_LEVEL::CODEC_CAPABILITY_LEVEL_BASIC_SUPPORT) \
	op(EUABT_VIDEO_CODEC_CAPABILITY_LEVEL::CODEC_CAPABILITY_LEVEL_1080P30FPS) \
	op(EUABT_VIDEO_CODEC_CAPABILITY_LEVEL::CODEC_CAPABILITY_LEVEL_1080P60FPS) \
	op(EUABT_VIDEO_CODEC_CAPABILITY_LEVEL::CODEC_CAPABILITY_LEVEL_4K60FPS) 

enum class EUABT_VIDEO_CODEC_CAPABILITY_LEVEL : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_CODEC_CAPABILITY_LEVEL> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_CODEC_CAPABILITY_LEVEL>();

#define FOREACH_ENUM_EUABT_DEGRADATION_PREFERENCE(op) \
	op(EUABT_DEGRADATION_PREFERENCE::MAINTAIN_AUTO) \
	op(EUABT_DEGRADATION_PREFERENCE::MAINTAIN_QUALITY) \
	op(EUABT_DEGRADATION_PREFERENCE::MAINTAIN_FRAMERATE) \
	op(EUABT_DEGRADATION_PREFERENCE::MAINTAIN_BALANCED) \
	op(EUABT_DEGRADATION_PREFERENCE::MAINTAIN_RESOLUTION) \
	op(EUABT_DEGRADATION_PREFERENCE::DISABLED) 

enum class EUABT_DEGRADATION_PREFERENCE : uint8;
template<> struct TIsUEnumClass<EUABT_DEGRADATION_PREFERENCE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_DEGRADATION_PREFERENCE>();

#define FOREACH_ENUM_EUABT_ENCODING_PREFERENCE(op) \
	op(EUABT_ENCODING_PREFERENCE::PREFER_AUTO) \
	op(EUABT_ENCODING_PREFERENCE::PREFER_SOFTWARE) \
	op(EUABT_ENCODING_PREFERENCE::PREFER_HARDWARE) 

enum class EUABT_ENCODING_PREFERENCE : uint8;
template<> struct TIsUEnumClass<EUABT_ENCODING_PREFERENCE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_ENCODING_PREFERENCE>();

#define FOREACH_ENUM_EUABT_COMPRESSION_PREFERENCE(op) \
	op(EUABT_COMPRESSION_PREFERENCE::PREFER_COMPRESSION_AUTO) \
	op(EUABT_COMPRESSION_PREFERENCE::PREFER_LOW_LATENCY) \
	op(EUABT_COMPRESSION_PREFERENCE::PREFER_QUALITY) 

enum class EUABT_COMPRESSION_PREFERENCE : uint8;
template<> struct TIsUEnumClass<EUABT_COMPRESSION_PREFERENCE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_COMPRESSION_PREFERENCE>();

#define FOREACH_ENUM_EUABT_BACKGROUND_BLUR_DEGREE(op) \
	op(EUABT_BACKGROUND_BLUR_DEGREE::BLUR_DEGREE_LOW) \
	op(EUABT_BACKGROUND_BLUR_DEGREE::BLUR_DEGREE_MEDIUM) \
	op(EUABT_BACKGROUND_BLUR_DEGREE::BLUR_DEGREE_HIGH) 

enum class EUABT_BACKGROUND_BLUR_DEGREE : uint8;
template<> struct TIsUEnumClass<EUABT_BACKGROUND_BLUR_DEGREE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_BACKGROUND_BLUR_DEGREE>();

#define FOREACH_ENUM_EUABT_SEG_MODEL_TYPE(op) \
	op(EUABT_SEG_MODEL_TYPE::SEG_MODEL_AI) \
	op(EUABT_SEG_MODEL_TYPE::SEG_MODEL_GREEN) 

enum class EUABT_SEG_MODEL_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_SEG_MODEL_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_SEG_MODEL_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_QOE_PREFERENCE_TYPE(op) \
	op(EUABT_VIDEO_QOE_PREFERENCE_TYPE::VIDEO_QOE_PREFERENCE_BALANCE) \
	op(EUABT_VIDEO_QOE_PREFERENCE_TYPE::VIDEO_QOE_PREFERENCE_DELAY_FIRST) \
	op(EUABT_VIDEO_QOE_PREFERENCE_TYPE::VIDEO_QOE_PREFERENCE_PICTURE_QUALITY_FIRST) \
	op(EUABT_VIDEO_QOE_PREFERENCE_TYPE::VIDEO_QOE_PREFERENCE_FLUENCY_FIRST) 

enum class EUABT_VIDEO_QOE_PREFERENCE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_QOE_PREFERENCE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_QOE_PREFERENCE_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_FILE_RECORDING_TYPE(op) \
	op(EUABT_AUDIO_FILE_RECORDING_TYPE::AUDIO_FILE_RECORDING_MIC) \
	op(EUABT_AUDIO_FILE_RECORDING_TYPE::AUDIO_FILE_RECORDING_PLAYBACK) \
	op(EUABT_AUDIO_FILE_RECORDING_TYPE::AUDIO_FILE_RECORDING_MIXED) 

enum class EUABT_AUDIO_FILE_RECORDING_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_FILE_RECORDING_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_FILE_RECORDING_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION(op) \
	op(EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION::AUDIO_ENCODED_FRAME_OBSERVER_POSITION_RECORD) \
	op(EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION::AUDIO_ENCODED_FRAME_OBSERVER_POSITION_PLAYBACK) \
	op(EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION::AUDIO_ENCODED_FRAME_OBSERVER_POSITION_MIXED) 

enum class EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_ENCODED_FRAME_OBSERVER_POSITION>();

#define FOREACH_ENUM_EUABT_VOICE_BEAUTIFIER_PRESET(op) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::VOICE_BEAUTIFIER_OFF) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::CHAT_BEAUTIFIER_MAGNETIC) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::CHAT_BEAUTIFIER_FRESH) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::CHAT_BEAUTIFIER_VITALITY) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::SINGING_BEAUTIFIER) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_VIGOROUS) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_DEEP) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_MELLOW) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_FALSETTO) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_FULL) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_CLEAR) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_RESOUNDING) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::TIMBRE_TRANSFORMATION_RINGING) \
	op(EUABT_VOICE_BEAUTIFIER_PRESET::ULTRA_HIGH_QUALITY_VOICE) 

enum class EUABT_VOICE_BEAUTIFIER_PRESET : uint8;
template<> struct TIsUEnumClass<EUABT_VOICE_BEAUTIFIER_PRESET> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VOICE_BEAUTIFIER_PRESET>();

#define FOREACH_ENUM_EUABT_AUDIO_EFFECT_PRESET(op) \
	op(EUABT_AUDIO_EFFECT_PRESET::AUDIO_EFFECT_OFF) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_KTV) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_VOCAL_CONCERT) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_STUDIO) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_PHONOGRAPH) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_VIRTUAL_STEREO) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_SPACIAL) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_ETHEREAL) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_3D_VOICE) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_VIRTUAL_SURROUND_SOUND) \
	op(EUABT_AUDIO_EFFECT_PRESET::ROOM_ACOUSTICS_CHORUS) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_UNCLE) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_OLDMAN) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_BOY) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_SISTER) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_GIRL) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_PIGKING) \
	op(EUABT_AUDIO_EFFECT_PRESET::VOICE_CHANGER_EFFECT_HULK) \
	op(EUABT_AUDIO_EFFECT_PRESET::STYLE_TRANSFORMATION_RNB) \
	op(EUABT_AUDIO_EFFECT_PRESET::STYLE_TRANSFORMATION_POPULAR) \
	op(EUABT_AUDIO_EFFECT_PRESET::PITCH_CORRECTION) 

enum class EUABT_AUDIO_EFFECT_PRESET : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_EFFECT_PRESET> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_EFFECT_PRESET>();

#define FOREACH_ENUM_EUABT_VOICE_CONVERSION_PRESET(op) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CONVERSION_OFF) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_NEUTRAL) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_SWEET) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_SOLID) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_BASS) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_CARTOON) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_CHILDLIKE) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_PHONE_OPERATOR) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_MONSTER) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_TRANSFORMERS) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_GROOT) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_DARTH_VADER) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_IRON_LADY) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_SHIN_CHAN) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_GIRLISH_MAN) \
	op(EUABT_VOICE_CONVERSION_PRESET::VOICE_CHANGER_CHIPMUNK) 

enum class EUABT_VOICE_CONVERSION_PRESET : uint8;
template<> struct TIsUEnumClass<EUABT_VOICE_CONVERSION_PRESET> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VOICE_CONVERSION_PRESET>();

#define FOREACH_ENUM_EUABT_SIMULCAST_STREAM_MODE(op) \
	op(EUABT_SIMULCAST_STREAM_MODE::AUTO_SIMULCAST_STREAM) \
	op(EUABT_SIMULCAST_STREAM_MODE::DISABLE_SIMULCAST_STREAM) \
	op(EUABT_SIMULCAST_STREAM_MODE::ENABLE_SIMULCAST_STREAM) 

enum class EUABT_SIMULCAST_STREAM_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_SIMULCAST_STREAM_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_SIMULCAST_STREAM_MODE>();

#define FOREACH_ENUM_EUABT_CAMERA_STABILIZATION_MODE(op) \
	op(EUABT_CAMERA_STABILIZATION_MODE::CAMERA_STABILIZATION_MODE_OFF) \
	op(EUABT_CAMERA_STABILIZATION_MODE::CAMERA_STABILIZATION_MODE_AUTO) \
	op(EUABT_CAMERA_STABILIZATION_MODE::CAMERA_STABILIZATION_MODE_LEVEL_1) \
	op(EUABT_CAMERA_STABILIZATION_MODE::CAMERA_STABILIZATION_MODE_LEVEL_2) \
	op(EUABT_CAMERA_STABILIZATION_MODE::CAMERA_STABILIZATION_MODE_LEVEL_3) 

enum class EUABT_CAMERA_STABILIZATION_MODE : uint8;
template<> struct TIsUEnumClass<EUABT_CAMERA_STABILIZATION_MODE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_CAMERA_STABILIZATION_MODE>();

#define FOREACH_ENUM_EUABT_SCREENCAPTURESOURCETYPE(op) \
	op(EUABT_ScreenCaptureSourceType::ScreenCaptureSourceType_Unknown) \
	op(EUABT_ScreenCaptureSourceType::ScreenCaptureSourceType_Window) \
	op(EUABT_ScreenCaptureSourceType::ScreenCaptureSourceType_Screen) \
	op(EUABT_ScreenCaptureSourceType::ScreenCaptureSourceType_Custom) 

enum class EUABT_ScreenCaptureSourceType : uint8;
template<> struct TIsUEnumClass<EUABT_ScreenCaptureSourceType> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_ScreenCaptureSourceType>();

#define FOREACH_ENUM_EUABT_SCREEN_SCENARIO_TYPE(op) \
	op(EUABT_SCREEN_SCENARIO_TYPE::SCREEN_SCENARIO_DOCUMENT) \
	op(EUABT_SCREEN_SCENARIO_TYPE::SCREEN_SCENARIO_GAMING) \
	op(EUABT_SCREEN_SCENARIO_TYPE::SCREEN_SCENARIO_VIDEO) \
	op(EUABT_SCREEN_SCENARIO_TYPE::SCREEN_SCENARIO_RDC) 

enum class EUABT_SCREEN_SCENARIO_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_SCREEN_SCENARIO_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_SCREEN_SCENARIO_TYPE>();

#define FOREACH_ENUM_EUABT_AUDIO_SAMPLE_RATE_TYPE(op) \
	op(EUABT_AUDIO_SAMPLE_RATE_TYPE::AUDIO_SAMPLE_RATE_32000) \
	op(EUABT_AUDIO_SAMPLE_RATE_TYPE::AUDIO_SAMPLE_RATE_44100) \
	op(EUABT_AUDIO_SAMPLE_RATE_TYPE::AUDIO_SAMPLE_RATE_48000) 

enum class EUABT_AUDIO_SAMPLE_RATE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_AUDIO_SAMPLE_RATE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_AUDIO_SAMPLE_RATE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_CODEC_TYPE_FOR_STREAM(op) \
	op(EUABT_VIDEO_CODEC_TYPE_FOR_STREAM::VIDEO_CODEC_H264_FOR_STREAM) \
	op(EUABT_VIDEO_CODEC_TYPE_FOR_STREAM::VIDEO_CODEC_H265_FOR_STREAM) 

enum class EUABT_VIDEO_CODEC_TYPE_FOR_STREAM : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_CODEC_TYPE_FOR_STREAM> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_CODEC_TYPE_FOR_STREAM>();

#define FOREACH_ENUM_EUABT_VIDEO_CODEC_PROFILE_TYPE(op) \
	op(EUABT_VIDEO_CODEC_PROFILE_TYPE::VIDEO_CODEC_PROFILE_BASELINE) \
	op(EUABT_VIDEO_CODEC_PROFILE_TYPE::VIDEO_CODEC_PROFILE_MAIN) \
	op(EUABT_VIDEO_CODEC_PROFILE_TYPE::VIDEO_CODEC_PROFILE_HIGH) 

enum class EUABT_VIDEO_CODEC_PROFILE_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_CODEC_PROFILE_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_CODEC_PROFILE_TYPE>();

#define FOREACH_ENUM_EUABT_VIDEO_ORIENTATION(op) \
	op(EUABT_VIDEO_ORIENTATION::VIDEO_ORIENTATION_0) \
	op(EUABT_VIDEO_ORIENTATION::VIDEO_ORIENTATION_90) \
	op(EUABT_VIDEO_ORIENTATION::VIDEO_ORIENTATION_180) \
	op(EUABT_VIDEO_ORIENTATION::VIDEO_ORIENTATION_270) 

enum class EUABT_VIDEO_ORIENTATION : uint8;
template<> struct TIsUEnumClass<EUABT_VIDEO_ORIENTATION> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_VIDEO_ORIENTATION>();

#define FOREACH_ENUM_EUABT_PRIORITY_TYPE(op) \
	op(EUABT_PRIORITY_TYPE::PRIORITY_HIGH) \
	op(EUABT_PRIORITY_TYPE::PRIORITY_NORMAL) 

enum class EUABT_PRIORITY_TYPE : uint8;
template<> struct TIsUEnumClass<EUABT_PRIORITY_TYPE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_PRIORITY_TYPE>();

#define FOREACH_ENUM_EUABT_HEADPHONE_EQUALIZER_PRESET(op) \
	op(EUABT_HEADPHONE_EQUALIZER_PRESET::HEADPHONE_EQUALIZER_OFF) \
	op(EUABT_HEADPHONE_EQUALIZER_PRESET::HEADPHONE_EQUALIZER_OVEREAR) \
	op(EUABT_HEADPHONE_EQUALIZER_PRESET::HEADPHONE_EQUALIZER_INEAR) 

enum class EUABT_HEADPHONE_EQUALIZER_PRESET : uint8;
template<> struct TIsUEnumClass<EUABT_HEADPHONE_EQUALIZER_PRESET> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_HEADPHONE_EQUALIZER_PRESET>();

#define FOREACH_ENUM_EUABT_FEATURETYPE(op) \
	op(EUABT_FeatureType::VIDEO_VIRTUAL_BACKGROUND) \
	op(EUABT_FeatureType::VIDEO_BEAUTY_EFFECT) 

enum class EUABT_FeatureType : uint8;
template<> struct TIsUEnumClass<EUABT_FeatureType> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_FeatureType>();

#define FOREACH_ENUM_EUABT_LASTMILE_PROBE_RESULT_STATE(op) \
	op(EUABT_LASTMILE_PROBE_RESULT_STATE::LASTMILE_PROBE_RESULT_COMPLETE) \
	op(EUABT_LASTMILE_PROBE_RESULT_STATE::LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE) \
	op(EUABT_LASTMILE_PROBE_RESULT_STATE::LASTMILE_PROBE_RESULT_UNAVAILABLE) 

enum class EUABT_LASTMILE_PROBE_RESULT_STATE : uint8;
template<> struct TIsUEnumClass<EUABT_LASTMILE_PROBE_RESULT_STATE> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_LASTMILE_PROBE_RESULT_STATE>();

#define FOREACH_ENUM_EUABT_FACE_SHAPE_AREA(op) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_NONE) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_HEADSCALE) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_FOREHEAD) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_FACECONTOUR) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_FACELENGTH) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_FACEWIDTH) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_CHEEKBONE) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_CHEEK) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_CHIN) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_EYESCALE) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_NOSELENGTH) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_NOSEWIDTH) \
	op(EUABT_FACE_SHAPE_AREA::FACE_SHAPE_AREA_MOUTHSCALE) 

enum class EUABT_FACE_SHAPE_AREA : uint8;
template<> struct TIsUEnumClass<EUABT_FACE_SHAPE_AREA> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_FACE_SHAPE_AREA>();

#define FOREACH_ENUM_EUABT_HDR_CAPABILITY(op) \
	op(EUABT_HDR_CAPABILITY::HDR_CAPABILITY_UNKNOWN) \
	op(EUABT_HDR_CAPABILITY::HDR_CAPABILITY_UNSUPPORTED) \
	op(EUABT_HDR_CAPABILITY::HDR_CAPABILITY_SUPPORTED) 

enum class EUABT_HDR_CAPABILITY : uint8;
template<> struct TIsUEnumClass<EUABT_HDR_CAPABILITY> { enum { Value = true }; };
template<> AGORAPLUGIN_API UEnum* StaticEnum<EUABT_HDR_CAPABILITY>();

PRAGMA_ENABLE_DEPRECATION_WARNINGS
